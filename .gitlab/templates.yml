#------------------------------------------------------------------------------#
# FleCSI Gitlab CI: Templates
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# darwin_archive_spack_env
#
# Archive the current spack state.
#------------------------------------------------------------------------------#

.darwin_archive_spack_env:
  script: &darwin_archive_spack_env
    - if [ -n "$ARCHIVE_SPACK_ENV" ]; then echo -e "${COLOR_MAGENTA}Archiving Spack Environment${COLOR_PLAIN}" && cd $TMPDIR && mksquashfs spack ${CI_PROJECT_DIR}/state/spack.sqfs; fi

#------------------------------------------------------------------------------#
# darwin_restore_spack_env
#
# Restore an archived spack state.
#------------------------------------------------------------------------------#

.darwin_restore_spack_env:
  script: &darwin_restore_spack_env
    - cd $TMPDIR && unsquashfs -d spack ${CI_PROJECT_DIR}/state/spack.sqfs

#------------------------------------------------------------------------------#
# darwin_env_create
#
# Create a clean spack environment on Darwin
#------------------------------------------------------------------------------#
.aux_darwin_print_env_info:
  stage: Environment
  script: &darwin_print_env_info
    - |
      echo -e "${COLOR_MAGENTA}Creating Build Environment${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Environment: ${ENVIRONMENT}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}MPI Provider: ${MPI_PROVIDER}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Version: ${VERSION}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Variants: ${VARIANTS}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Toolchain: ${TOOLCHAIN}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Partitions: ${PARTITIONS}${COLOR_PLAIN}"

.darwin_python_env_init:
  script: &darwin_python_env_init
    - echo -e "\e[0Ksection_start:`date +%s`:python_env_init[collapsed=true]\r\e[0K${COLOR_CYAN}Adding Python dependencies${COLOR_PLAIN}"
    - spack config add concretizer:unify:when_possible
    - spack config add concretizer:reuse:false
    - spack config add packages:all:compiler:["gcc@${GCC_VERSION}"]
    - spack add cmake py-sphinx py-sphinx-rtd-theme py-recommonmark graphviz +poppler
    - spack install -j $(nproc)
    - echo -e "\e[0Ksection_end:`date +%s`:python_env_init\r\e[0K"

.darwin_clang_format_init:
  script: &darwin_clang_format_init
    - export CLANG_COMPILER_SPEC=clang@${FORMAT_VERSION:-13.0.1}
    - export CLANG_CC=$(spack compiler info $CLANG_COMPILER_SPEC | grep "cc =" | grep $(uname -i) | cut -d= -f2 | head -n1)
    - export PATH=$(dirname $CLANG_CC):${PATH}

.darwin_env_create:
  script: &darwin_env_create
    - module load git
    - export DARWIN_SPACK_UPSTREAM=/projects/flecsi-devel/gitlab/spack-upstream/${USE_SPACK_UPSTREAM}
    - export DARWIN_SPACK_BOOTSTRAP_MIRROR=/projects/flecsi-devel/gitlab/spack-bootstrap/${USE_SPACK_UPSTREAM}/$(uname -i)
    - |
      rsync -rpl \
        --exclude=".git" \
        --include="etc/spack/**" \
        --include="lib/spack/**" \
        --exclude-from=${DARWIN_SPACK_UPSTREAM}/.gitignore \
        ${DARWIN_SPACK_UPSTREAM}/ $TMPDIR/spack/

#------------------------------------------------------------------------------#
# darwin_env_shell
#
# Convenience function to setup shell environment on Darwin
#------------------------------------------------------------------------------#

.darwin_env_shell:
  script: &darwin_env_shell
    - export SPACK_DISABLE_LOCAL_CONFIG=true
    - export SPACK_USER_CACHE_PATH=$TMPDIR/spack-local
    - source $TMPDIR/spack/share/spack/setup-env.sh
    - module load gcc/${GCC_VERSION}
    - module load cuda/${CUDA_VERSION}
    - export CC=gcc  # default C compiler
    - export CXX=g++ # default C++ compiler
    - export COMPILER_PATH=$(dirname $(spack compiler info ${TOOLCHAIN} | grep "cc =" | grep $(uname -i) | cut -d= -f2 | head -n1))
    - export PATH=$COMPILER_PATH:$PATH
    - echo "PATH=${PATH}"
    - |-
      if [ "$(spack arch)" = "linux-rhel7-power9le" ] ; then
        echo "Adding linker flags to avoid CUDA linker issue on power9 nodes"
        export CXX_FLAGS="-Wl,-u,cuIpcOpenMemHandle_v2 -Wall ${CXX_FLAGS} -Wno-unused-command-line-argument"
        export C_FLAGS="-Wl,-u,cuIpcOpenMemHandle_v2 -Wall ${C_FLAGS} -Wno-unused-command-line-argument"
      fi

.darwin_env_spack_environment:
  script: &darwin_env_spack_environment
    - export SPACK_ENVIRONMENT=`echo -e "darwin-${ENVIRONMENT}" | sed 's,\.,-,g'`

#------------------------------------------------------------------------------#
# darwin_env_init
#
# Initialize Spack environment on Darwin
#------------------------------------------------------------------------------#
.darwin_env_init:
  script: &darwin_env_init
    - echo -e "\e[0Ksection_start:`date +%s`:spack_env_init[collapsed=true]\r\e[0K${COLOR_CYAN}Creating Spack environment${COLOR_PLAIN}"
    - *darwin_env_create
    - *darwin_print_env_info
    - *darwin_env_shell
    - *darwin_env_spack_environment
    - spack bootstrap add --trust local-sources ${DARWIN_SPACK_BOOTSTRAP_MIRROR}/metadata/sources
    - spack bootstrap add --trust local-binaries ${DARWIN_SPACK_BOOTSTRAP_MIRROR}/metadata/binaries
    - spack env create ${SPACK_ENVIRONMENT}-${MPI_PROVIDER}
    - spack env activate ${SPACK_ENVIRONMENT}-${MPI_PROVIDER}
    - spack config add upstreams:default:install_tree:${DARWIN_SPACK_UPSTREAM}/opt/spack/
    - spack repo add spack-repo
    - echo -e "\e[0Ksection_end:`date +%s`:spack_env_init\r\e[0K"

.darwin_env_spack_install_flecsi_deps:
  script: &darwin_env_spack_install_flecsi_deps
    - echo -e "\e[0Ksection_start:`date +%s`:spack_env_install_flecsi_deps[collapsed=true]\r\e[0K${COLOR_CYAN}Installing FleCSI dependencies${COLOR_PLAIN}"
    # This uses the legion backend by default because it also satisfies the dependencies
    # for MPI (and potentially HPX)
    - export SPACK_INSTALL_FLECSI_BACKEND=${SPACK_INSTALL_FLECSI_BACKEND:-legion}
    - |
      if [ "$(spack arch)" = "linux-rhel7-power9le" ]; then
        # required due to older libibverbs.so being pulled in from /usr/lib64 rpath
        # can be removed once Spack-built Slurm is current with system Slurm
        export ARCH_DEPS="^rdma-core@22.4"
      else
        export ARCH_DEPS=""
      fi
    - echo -e "spack add ${VERSION} %${TOOLCHAIN}
        backend=${SPACK_INSTALL_FLECSI_BACKEND} ${VARIANTS} ^${MPI_PROVIDER} ${ARCH_DEPS}"
    - spack add ${VERSION} %${TOOLCHAIN}
        backend=${SPACK_INSTALL_FLECSI_BACKEND} ${VARIANTS} ^${MPI_PROVIDER} ${ARCH_DEPS}
    - spack install -j $(nproc) --only dependencies
    - spack find -v
    - echo -e "\e[0Ksection_end:`date +%s`:spack_env_install_flecsi_deps\r\e[0K"

#------------------------------------------------------------------------------#
# darwin_build_template
#
# This template builds flecsi on the Darwin cluster
#
# Variables:
#   ENVIRONMENT:  The target environment from the flecsi gitlab-ci project,
#                 e.g., one of the primary branches, such as 'devel', or '1.4'.
#   PARTITIONS:    Darwin cluster partitions
#   MPI_PROVIDER: The MPI provider. Generally this will be mpich, or openmpi.
#   BUILD_TYPE:   CMake build type, e.g., debug.
#   BACKEND:      FleCSI backend.
#   VERSION:  The version of FleCSI to use for spack build.
#   VARIANTS: Spack variants not including the backend.
#------------------------------------------------------------------------------#

.aux_darwin_print_build_info:
  script: &darwin_print_build_info
    - |-
      echo -e "${COLOR_MAGENTA}Creating Build Environment${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Environment: ${ENVIRONMENT}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Partitions: ${PARTITIONS}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}MPI Provider: ${MPI_PROVIDER}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Backend: ${BACKEND}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}C++ Compiler: ${CXX_COMPILER}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}C++ Flags: ${CXX_FLAGS}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}C Compiler: ${C_COMPILER}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}C Flags: ${C_FLAGS}${COLOR_PLAIN}"
      which gcc
      which cc
      spack arch

.darwin_setup_hip:
  script: &darwin_setup_hip
    - |
      if [ "$CXX_COMPILER" = "hipcc" ]; then
        export ROCMINFO_PATH=/opt/rocm-${ROCM_VERSION}/bin
        export ROCM_PATH=/opt/rocm-${ROCM_VERSION}
        export HSA_PATH=/opt/rocm-${ROCM_VERSION}/hsa
        export DEVICE_LIB_PATH=/opt/rocm-${ROCM_VERSION}/amdgcn/bitcode/
        export HIP_PLATFORM=amd
        export HIP_CLANG_PATH=/opt/rocm-${ROCM_VERSION}/llvm/bin
        export HIP_COMPILER=clang
        export PATH=/opt/rocm-${ROCM_VERSION}/bin:$PATH
        echo -e "${COLOR_MAGENTA}Using Darwin HIP installation at: ${ROCM_PATH}${COLOR_PLAIN}"
      fi

.darwin_build_template:
  stage: Build + Unit Tests
  script:
    - *darwin_env_init
    - *darwin_env_spack_install_flecsi_deps
    - if [ -f /usr/bin/nvidia-smi ] ; then nvidia-smi || true; fi
    - spack env activate ${SPACK_ENVIRONMENT}-${MPI_PROVIDER}
    - *darwin_setup_hip
    - mkdir -p ${CI_PROJECT_DIR}/state/build
    - cd ${CI_PROJECT_DIR}/state/build
    - echo -e "\e[0Ksection_start:`date +%s`:build_noflog\r\e[0K${COLOR_CYAN}Build without FLOG${COLOR_PLAIN}"
    - *darwin_print_build_info
    - |-
      cmake -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/state/install \
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
        -DCMAKE_CXX_COMPILER=${CXX_COMPILER} \
        -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" \
        -DCMAKE_C_COMPILER=${C_COMPILER} \
        -DCMAKE_C_FLAGS="${C_FLAGS}" \
        -DFLECSI_BACKEND=${BACKEND} \
        -DENABLE_FLOG=OFF \
        ${CMAKE_OPTIONS} \
        ../..
    - make -j $(nproc)
    - echo -e "\e[0Ksection_end:`date +%s`:build_noflog\r\e[0K"
    - |
      if [ "${ENABLE_UNIT_TESTS}" = "ON" ] ; then
        echo -e "\e[0Ksection_start:`date +%s`:build\r\e[0K${COLOR_CYAN}Build with FLOG${COLOR_PLAIN}"
        cmake -DENABLE_FLOG=ON -DENABLE_UNIT_TESTS=ON .
        make -j $(nproc)
        echo -e "\e[0Ksection_end:`date +%s`:build\r\e[0K"
        echo -e "\e[0Ksection_start:`date +%s`:test\r\e[0K${COLOR_CYAN}Test${COLOR_PLAIN}"
        export GASNET_BACKTRACE=1
        export CTEST_OUTPUT_ON_FAILURE=1
        ctest --output-junit tests.xml
        echo -e "\e[0Ksection_end:`date +%s`:test\r\e[0K"
      fi
    - echo -e "\e[0Ksection_start:`date +%s`:install\r\e[0K${COLOR_CYAN}Install${COLOR_PLAIN}"
    - make install
    - echo -e "\e[0Ksection_end:`date +%s`:install\r\e[0K"
    - *darwin_archive_spack_env
  artifacts:
    expire_in: 2 weeks
    paths:
      - ${CI_PROJECT_DIR}/state
    reports:
      junit: ${CI_PROJECT_DIR}/state/build/tests.xml

#------------------------------------------------------------------------------#
# darwin_defaults_build_template
#
# This template builds flecsi on the Darwin cluster with no options passed to
# cmake to test the default settings.
#
# Variables:
#   ENVIRONMENT:  The target environment from the flecsi gitlab-ci project,
#                 e.g., one of the primary branches, such as 'devel', or '1.4'.
#   PARTITION:    Darwin cluster partition
#   MPI_PROVIDER: The MPI provider. Generally this will be mpich, or openmpi.
#   VERSION:  The version of FleCSI to use for spack build.
#   VARIANTS: Spack variants not including the backend.
#------------------------------------------------------------------------------#

.aux_darwin_print_defaults_build_info:
  script: &darwin_print_defaults_build_info
    - |-
      echo -e "${COLOR_MAGENTA}Creating Build Environment${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Environment: ${ENVIRONMENT}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Partitions: ${PARTITIONS}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}MPI Provider: ${MPI_PROVIDER}${COLOR_PLAIN}"
      which gcc
      which cc
      spack arch

.darwin_defaults_build_template:
  script:
    - *darwin_env_init
    - *darwin_env_spack_install_flecsi_deps
    - mkdir -p ${CI_PROJECT_DIR}/state/build
    - cd ${CI_PROJECT_DIR}/state/build
    - *darwin_print_defaults_build_info
    - echo -e "\e[0Ksection_start:`date +%s`:build\r\e[0K${COLOR_CYAN}Build${COLOR_PLAIN}"
    - |-
      which gcc
      which cc
      cmake -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/state/install ../..
    - make -j $(nproc)
    - echo -e "\e[0Ksection_end:`date +%s`:build\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:install\r\e[0K${COLOR_CYAN}Install${COLOR_PLAIN}"
    - make install
    - echo -e "\e[0Ksection_end:`date +%s`:install\r\e[0K"
  artifacts:
    expire_in: 2 weeks
    paths:
      - ${CI_PROJECT_DIR}/state

#------------------------------------------------------------------------------#
# darwin_docs_and_format_template
#
# This template builds the flecsi docs on the Darwin cluster and checks 
# formatting
#
# Variables:
#   ENVIRONMENT:  The target environment from the flecsi gitlab-ci project,
#                 e.g., one of the primary branches, such as 'devel', or '1.4'.
#   PARTITIONS:   Darwin cluster partitions
#   FORMAT_VERSION: The required version of clang-format
#------------------------------------------------------------------------------#
#
.aux_print_diff_format_info:
  script: &print_diff_format_info
    - |-
      echo -e "${COLOR_MAGENTA}Checking Formatting${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Version (clang-format): ${FORMAT_VERSION}${COLOR_PLAIN}"

.darwin_docs_and_format_template:
  variables:
    MPI_PROVIDER: none
  script:
    - *darwin_env_init
    - *darwin_python_env_init
    - *darwin_clang_format_init
    - mkdir -p ${CI_PROJECT_DIR}/state/build
    - cd ${CI_PROJECT_DIR}/state/build
    - *print_diff_format_info
    - echo -e "\e[0Ksection_start:`date +%s`:docs\r\e[0K${COLOR_CYAN}Build Documentation${COLOR_PLAIN}"
    - |-
      cmake -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/state/install \
        -DENABLE_LIBRARY=OFF \
        -DENABLE_DOCUMENTATION=ON \
        -DENABLE_FORMAT=ON \
        -DClangFormat_VERSION=${FORMAT_VERSION} \
        ../..
    - fail=0
    - |
      if make doc; then
        touch ${CI_PROJECT_DIR}/state/docs-passed;
      else fail=$?
      fi
    - echo -e "\e[0Ksection_end:`date +%s`:docs\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:format\r\e[0K${COLOR_CYAN}Check Formatting${COLOR_PLAIN}"
    - |
      if make format && cd ${CI_PROJECT_DIR} && git diff --exit-code --compact-summary; then
        touch ${CI_PROJECT_DIR}/state/format-passed;
      else fail=$?
      fi
    - date
    - echo -e "\e[0Ksection_end:`date +%s`:format\r\e[0K"
    - exit $fail
  artifacts:
    expire_in: 2 weeks
    paths:
      - ${CI_PROJECT_DIR}/state

#------------------------------------------------------------------------------#
# darwin_standalone_template
#
# This template builds the flecsi tutorial examples.
#
# Variables:
#   LABEL:        This will be used to create unique temporary directories.
#   STDIR:        The source directory (containing CMakeLists.txt file).
#   ENVIRONMENT:  The target environment from the flecsi gitlab-ci project,
#                 e.g., one of the primary branches, such as 'devel', or '1.4'.
#   MPI_PROVIDER: The MPI provider. Generally this will be mpich, or openmpi.
#------------------------------------------------------------------------------#

.aux_print_build_standalone_info:
  script: &print_build_standalone_info
    - |-
      echo -e "${COLOR_MAGENTA}Creating Build Environment${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Environment: ${ENVIRONMENT}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}MPI Provider: ${MPI_PROVIDER}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Label: ${LABEL}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Source Directory: ${STDIR}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}C++ Compiler: ${CXX_COMPILER}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}C++ Flags: ${CXX_FLAGS}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}C Compiler: ${C_COMPILER}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}C Flags: ${C_FLAGS}${COLOR_PLAIN}"
      echo -e "\t${COLOR_BLUE}Partitions: ${PARTITIONS}${COLOR_PLAIN}"

.darwin_standalone_template:
  stage: Standalone
  script:
    - *darwin_restore_spack_env
    - *darwin_env_shell
    - *darwin_env_spack_environment
    - export CMAKE_PREFIX_PATH=${CI_PROJECT_DIR}/state/install
    - spack env activate ${SPACK_ENVIRONMENT}-${MPI_PROVIDER}
    - spack arch
    - mkdir -p ${CI_PROJECT_DIR}/state/build-${LABEL}
    - cd ${CI_PROJECT_DIR}/state/build-${LABEL}
    - *print_build_standalone_info
    - |-
      cmake -DENABLE_UNIT_TESTS=ON \
        -DCMAKE_CXX_COMPILER=${CXX_COMPILER} \
        -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" \
        -DCMAKE_C_COMPILER=${C_COMPILER} \
        -DCMAKE_C_FLAGS="${C_FLAGS}" \
        ${CI_PROJECT_DIR}/${STDIR}
    - make
    - CTEST_OUTPUT_ON_FAILURE=1 make test

#------------------------------------------------------------------------------#
# check_format_template
#------------------------------------------------------------------------------#


.check_docs_and_format_template:
  stage: Final
  script:
    - "[ -e ${CI_PROJECT_DIR}/state/format-passed ] && [ -e ${CI_PROJECT_DIR}/state/docs-passed ]"
