#------------------------------------------------------------------------------#
# FleCSI Gitlab CI: Main
#------------------------------------------------------------------------------#

stages:
  - Canary
  - MPI backend
  - HPX backend
  - Legion backend
  - Standalone
  - Final

default:
  interruptible: true
  tags:
    - darwin-slurm-shared
  before_script:
   - echo "Running on $(hostname)"

variables:
  USE_SPACK_UPSTREAM: v0.19
  COLOR_BLUE: '\033[1;34m'
  COLOR_GREEN: '\033[0;32m'
  COLOR_MAGENTA: '\033[1;35m'
  COLOR_CYAN: '\033[1;36m'
  COLOR_PLAIN: '\033[0m'
  # global defaults
  GCC_VERSION: 11.1.0
  CLANG_VERSION: 13.0.1
  ROCM_VERSION: 4.5.2
  CUDA_VERSION: "11.7.0"
  WARN: -Wall -Wundef -W -Werror
  CXX_FLAGS: ${WARN}
  C_FLAGS: ${WARN}
  PARTITIONS: general,skylake-gold,skylake-platinum
  IB_EDR_CONSTRAINT: "--constraint=ib:edr"
  V100_CONSTRAINT: "--constraint=\"gpu1_model:Tesla_V100S-PCIE-32GB|gpu1_model:Tesla_V100-PCIE-32GB|gpu1_model:Tesla_V100-SXM2-16GB\""
  JOB_CONSTRAINTS: "${IB_EDR_CONSTRAINT}"
  SCHEDULER_PARAMETERS: "-N1 --qos=debug -p ${PARTITIONS} ${JOB_CONSTRAINTS}"
  LEGION_IBV: legion conduit=ibv
  LEGION_MPI: legion conduit=mpi
  LEGION_IBV_CUDA: "${LEGION_IBV} +cuda +cuda_unsupported_compiler"
  LEGION_MPI_CUDA: "${LEGION_MPI} +cuda +cuda_unsupported_compiler"
  KOKKOS_SERIAL: kokkos ~cuda
  KOKKOS_CUDA: kokkos +cuda +hwloc
  ENABLE_UNIT_TESTS: "ON"

#------------------------------------------------------------------------------#
# Common build variants
#------------------------------------------------------------------------------#
.mpich: &mpich
  MPI_PROVIDER: mpich
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: "+hdf5 +kokkos ^${LEGION_IBV} +kokkos ^${KOKKOS_SERIAL}"

.mpich-debug: &mpich-debug
  MPI_PROVIDER: mpich
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: "caliper_detail=low +graphviz +hdf5 +kokkos ^${LEGION_IBV} build_type=Debug +kokkos ^${KOKKOS_SERIAL}"

.mpich-hpx: &mpich-hpx
  MPI_PROVIDER: mpich
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: +kokkos ^hpx ^kokkos~cuda
  SPACK_INSTALL_FLECSI_BACKEND: hpx

.mpich-hpx-debug: &mpich-hpx-debug
  MPI_PROVIDER: mpich
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: caliper_detail=low +graphviz +kokkos ^hpx build_type=Debug ^kokkos~cuda
  SPACK_INSTALL_FLECSI_BACKEND: hpx

.openmpi: &openmpi
  MPI_PROVIDER: openmpi
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: "+hdf5 +kokkos ^${LEGION_IBV} +kokkos ^${KOKKOS_SERIAL}"

.openmpi-debug: &openmpi-debug
  MPI_PROVIDER: openmpi
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: "+hdf5 +kokkos ^${LEGION_IBV} build_type=Debug +kokkos ^${KOKKOS_SERIAL}"

.openmpi-hpx: &openmpi-hpx
  MPI_PROVIDER: openmpi
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: +kokkos ^hpx ^kokkos~cuda
  SPACK_INSTALL_FLECSI_BACKEND: hpx

.openmpi-hpx-debug: &openmpi-hpx-debug
  MPI_PROVIDER: openmpi
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: ^hpx build_type=Debug ^kokkos~cuda
  SPACK_INSTALL_FLECSI_BACKEND: hpx

.openmpi-cuda: &openmpi-cuda
  MPI_PROVIDER: openmpi
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: "+hdf5 +kokkos +cuda cuda_arch=70 ^${LEGION_IBV_CUDA} ^${KOKKOS_CUDA} ^cuda@${CUDA_VERSION}"

.openmpi-cuda-debug: &openmpi-cuda-debug
  MPI_PROVIDER: openmpi
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: "+hdf5 +kokkos +cuda cuda_arch=70 ^${LEGION_IBV_CUDA} build_type=Debug ^${KOKKOS_CUDA} ^cuda@${CUDA_VERSION}"

.openmpi-cuda-mpi: &openmpi-cuda-mpi
  MPI_PROVIDER: openmpi
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: "+hdf5 +kokkos +cuda cuda_arch=70 ^${LEGION_MPI_CUDA} ^${KOKKOS_CUDA} ^cuda@${CUDA_VERSION}"

.openmpi-cuda-mpi-debug: &openmpi-cuda-mpi-debug
  MPI_PROVIDER: openmpi
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: "+hdf5 +kokkos +cuda cuda_arch=70 ^${LEGION_MPI_CUDA} build_type=Debug ^${KOKKOS_CUDA} ^cuda@${CUDA_VERSION}"

.openmpi-rocm: &openmpi-rocm
  MPI_PROVIDER: openmpi
  VERSION: flecsi@'${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
  VARIANTS: +hdf5 +kokkos ^kokkos +hwloc +rocm amdgpu_target=gfx906

include: .gitlab/templates.yml

#------------------------------------------------------------------------------#
# Formatting target.
#
# The selected image must have the required clang-format version
# installed during image creation in the 'gitlab-ci' branch.
#------------------------------------------------------------------------------#

docs_and_format:check:
  extends: .check_docs_and_format_template
  needs:
    - job: docs_and_format
      artifacts: true
    - job: tutorial:legion
    - job: flaxpy:legion
    - job: poisson:legion
  only:
    - merge_requests
  variables:
    JOB_CONSTRAINTS: ""

#------------------------------------------------------------------------------#
# Build and unit tests for default settings.
#------------------------------------------------------------------------------#

mpich-defaults:
  stage: Legion backend
  extends: .darwin_defaults_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with MPICH provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

mpich-legion-gnu:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: legion
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=ON -DENABLE_KOKKOS=ON -DENABLE_GRAPHVIZ=ON -DCALIPER_DETAIL=low
    PARTITIONS: skylake-gold
    ARCHIVE_SPACK_ENV: "yes"

mpich-hpx-gnu:
  stage: HPX backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-hpx-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: hpx
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=OFF -DENABLE_KOKKOS=ON -DENABLE_GRAPHVIZ=ON -DCALIPER_DETAIL=low
    PARTITIONS: skylake-gold
    SCHEDULER_PARAMETERS: "-N 1 -n 8 -c 4 --qos=debug -p ${PARTITIONS}"
    ARCHIVE_SPACK_ENV: "yes"

mpich-legion-gnu:release:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    <<: *mpich
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Release
    BACKEND: legion
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=ON -DENABLE_KOKKOS=ON

mpich-hpx-gnu:release:
  stage: HPX backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    <<: *mpich-hpx
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Release
    BACKEND: hpx
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=OFF -DENABLE_KOKKOS=ON
    PARTITIONS: skylake-gold
    SCHEDULER_PARAMETERS: "-N 1 -n 8 -c 4 --qos=debug -p ${PARTITIONS}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with MPICH provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

mpich-mpi-gnu:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: mpi
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=ON -DENABLE_KOKKOS=ON

mpich-mpi-gnu:release:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    <<: *mpich
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Release
    BACKEND: mpi
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=ON -DENABLE_KOKKOS=ON

#------------------------------------------------------------------------------#
# Tutorial tests for Legion backend with MPICH provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

tutorial:legion:
  extends: .darwin_standalone_template
  needs:
    ["mpich-legion-gnu"]
  only:
    - merge_requests
  variables:
    <<: *mpich-debug
    LABEL: tutorial
    STDIR: tutorial
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: legion
    CXX_COMPILER: g++
    CXX_FLAGS: "${WARN} -Wno-parentheses"
    C_COMPILER: gcc
    C_FLAGS: ${CXX_FLAGS}
    PARTITIONS: skylake-gold

flaxpy:legion:
  extends: .darwin_standalone_template
  needs:
    ["mpich-legion-gnu"]
  only:
    - merge_requests
  variables:
    <<: *mpich-debug
    LABEL: standalone
    STDIR: tutorial/standalone/flaxpy
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: legion
    CXX_COMPILER: g++
    CXX_FLAGS: "${WARN} -Wno-parentheses"
    C_COMPILER: gcc
    C_FLAGS: ${CXX_FLAGS}
    PARTITIONS: skylake-gold
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"

poisson:legion:
  extends: .darwin_standalone_template
  needs:
    ["mpich-legion-gnu"]
  only:
    - merge_requests
  variables:
    <<: *mpich-debug
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: legion
    CXX_COMPILER: g++
    CXX_FLAGS: "${WARN} -Wno-parentheses"
    C_COMPILER: gcc
    C_FLAGS: ${CXX_FLAGS}
    PARTITIONS: skylake-gold
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with OpenMPI provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-legion-gnu:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: legion
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=ON

openmpi-legion-gnu:release:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    <<: *openmpi
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Release
    BACKEND: legion
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=ON

openmpi-hpx-gnu:
  stage: HPX backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-hpx-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: hpx
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=OFF
    PARTITIONS: skylake-gold
    SCHEDULER_PARAMETERS: "-N 1 -n 8 -c 4 --qos=debug -p ${PARTITIONS}"

openmpi-hpx-gnu:release:
  stage: HPX backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    <<: *openmpi
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Release
    BACKEND: hpx
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=OFF
    PARTITIONS: skylake-gold
    SCHEDULER_PARAMETERS: "-N 1 -n 8 -c 4 --qos=debug -p ${PARTITIONS}"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with OpenMPI provider,
# and Clang + CUDA compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-legion-clang-cuda:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-cuda-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "clang@${CLANG_VERSION}_cuda_${CUDA_VERSION}_sm70"
    BUILD_TYPE: Debug
    BACKEND: legion
    CXX_COMPILER: clang++
    CXX_FLAGS: "${WARN} -Wno-unknown-cuda-version"
    C_COMPILER: clang
    C_FLAGS: ${CXX_FLAGS}
    CMAKE_OPTIONS: -DENABLE_HDF5=ON -DENABLE_KOKKOS=on
    PARTITIONS: volta-x86,power9-rhel7
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"

openmpi-legion-clang-cuda-mpi:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-cuda-mpi-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "clang@${CLANG_VERSION}_cuda_${CUDA_VERSION}_sm70"
    BUILD_TYPE: Debug
    BACKEND: legion
    CXX_COMPILER: clang++
    CXX_FLAGS: "${WARN} -Wno-unknown-cuda-version"
    C_COMPILER: clang
    C_FLAGS: ${CXX_FLAGS}
    CMAKE_OPTIONS: -DENABLE_HDF5=ON -DENABLE_KOKKOS=on
    PARTITIONS: volta-x86,power9-rhel7
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with OpenMPI provider,
# and GNU compiler toolchain. Intentionally does NOT use Kokkos to also test
# that kind of build.
#------------------------------------------------------------------------------#

openmpi-mpi-gnu:
  stage: MPI backend
  extends: .darwin_build_template
  dependencies: []
  needs: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: mpi
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=ON

openmpi-mpi-gnu:release:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    <<: *openmpi
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    BUILD_TYPE: Release
    BACKEND: mpi
    CXX_COMPILER: g++
    C_COMPILER: gcc
    CMAKE_OPTIONS: -DENABLE_HDF5=ON


#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with MPICH provider,
# and Clang compiler toolchain.
#------------------------------------------------------------------------------#

mpich-legion-clang:
  stage: Legion backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "clang@${CLANG_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: legion
    CXX_COMPILER: clang++
    CXX_FLAGS: "-fcolor-diagnostics ${WARN}"
    C_COMPILER: clang
    C_FLAGS: ${CXX_FLAGS}
    CMAKE_OPTIONS: -DENABLE_HDF5=ON -DENABLE_KOKKOS=ON

mpich-hpx-clang:
  stage: HPX backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-hpx-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "clang@${CLANG_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: hpx
    CXX_COMPILER: clang++
    CXX_FLAGS: "-fcolor-diagnostics ${WARN}"
    C_COMPILER: clang
    C_FLAGS: ${CXX_FLAGS}
    CMAKE_OPTIONS: -DENABLE_HDF5=OFF -DENABLE_KOKKOS=ON
    PARTITIONS: skylake-gold
    SCHEDULER_PARAMETERS: "-N 1 -n 8 -c 4 --qos=debug -p ${PARTITIONS}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with MPICH provider,
# and Clang compiler toolchain. Intentionally does NOT use Kokkos to also test
# that kind of build.
#------------------------------------------------------------------------------#

mpich-mpi-clang:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "clang@${CLANG_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: mpi
    CXX_COMPILER: clang++
    CXX_FLAGS: "-fcolor-diagnostics ${WARN}"
    C_COMPILER: clang
    C_FLAGS: ${CXX_FLAGS}
    CMAKE_OPTIONS: -DENABLE_HDF5=ON

#------------------------------------------------------------------------------#
# Documentation
#------------------------------------------------------------------------------#
docs_and_format:
  stage: Canary
  extends: .darwin_docs_and_format_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    GCC_VERSION: 11.1.0
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    FORMAT_VERSION: 13.0.1
    JOB_CONSTRAINTS: ""
  allow_failure: true

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with OpenMPI provider,
# and Clang compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-mpi-clang:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-debug
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "clang@${CLANG_VERSION}"
    BUILD_TYPE: Debug
    BACKEND: mpi
    CXX_COMPILER: clang++
    CXX_FLAGS: "-fcolor-diagnostics ${WARN}"
    C_COMPILER: clang
    C_FLAGS: ${CXX_FLAGS}
    CMAKE_OPTIONS: -DENABLE_HDF5=ON -DENABLE_KOKKOS=ON

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with OpenMPI provider,
# and ROCM compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-mpi-rocm:
  stage: MPI backend
  extends: .darwin_build_template
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-rocm
    ENVIRONMENT: '${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}'
    TOOLCHAIN: "gcc@9.4.0"
    BUILD_TYPE: Debug
    BACKEND: mpi
    SPACK_INSTALL_FLECSI_BACKEND: mpi
    CXX_COMPILER: hipcc
    C_COMPILER: hipcc
    CMAKE_OPTIONS: -DENABLE_HDF5=ON -DENABLE_KOKKOS=on
    PARTITIONS: amd-epyc-gpu
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS} -C gpu1_model:Radeon_Instinct_MI50_32GB"
